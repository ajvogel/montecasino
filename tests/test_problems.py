import casino as cs
import numpy as np

# def test_fillBinGap():
#     """addUniform"""

#     data = np.array([
#         2,1,6,5,3,2,2,2,2,2,2,1,2,2,2,2,3,1,1,1,2,3,1,2,
#         2,2,1,1,1,3,1,3,1,1,2,2,1,3,1,1,1,4,4,1,1,1,3,3,
#         1,2,3,3,2,2,1,1,2,2,4,1,1,2,2,1,2,1,2,1,1,1,1,4,
#         1,2,1,2,1,1,3,2,2,2,1,4,2,1,1,4,2,1,1,2,1,4,3,1,
#         1,1,1,26,2,2,1,1,1,4,1,4,2,2,4,2,2,1,2,1,4,1,1,3,
#         3,3,2,4,4,2,2,1,1,1,2,1,2,1,2,2,4,2,1,2,2,1,2,1,
#         2,1,2,2,1,1,1,2,1,1,1,4,1,2,1,1,1,2,1,3,4,4,1,1,
#         3,1,4,4,3,2,2,1,1,3,2,3,1,1,2,2,2,2,3,4,1,2,5,3,
#         1,6,3,1,2,5,1,2,2,2,4,1,2,3,1,2,1,1,3,1,4,1,2,1,
#         1,3,4,1,1,1,1,1,1,1,1,2,1,2,3,2,3,5,1,1,2,4,3,3,
#         1,3,4,1,1,4,3,4,1,1,1,1,2,2,2,1,2,1,2,1,1,1,6,2,
#         2,4,1,5])

#     rv = cs.RandomVariable(maxBins=32)
#     counts = np.ones_like(data)
#     rv.fit(data, counts)

#     # print(rv.lower)
#     # print(rv.upper)
#     # print(rv.count)
#     # print(rv.known)

#     rv._assertConnected()
#     # print(x.lower)
#     # print(x.upper)
#     # print(x.count)
#     # print(x.known)
#     # assert x._assertConnected()


# def test_presetBins():
#     """addUniform"""

#     data = np.array([
#         2,1,6,5,3,2,2,2,2,2,2,1,2,2,2,2,3,1,1,1,2,3,1,2,
#         2,2,1,1,1,3,1,3,1,1,2,2,1,3,1,1,1,4,4,1,1,1,3,3,
#         1,2,3,3,2,2,1,1,2,2,4,1,1,2,2,1,2,1,2,1,1,1,1,4,
#         1,2,1,2,1,1,3,2,2,2,1,4,2,1,1,4,2,1,1,2,1,4,3,1,
#         1,1,1,26,2,2,1,1,1,4,1,4,2,2,4,2,2,1,2,1,4,1,1,3,
#         3,3,2,4,4,2,2,1,1,1,2,1,2,1,2,2,4,2,1,2,2,1,2,1,
#         2,1,2,2,1,1,1,2,1,1,1,4,1,2,1,1,1,2,1,3,4,4,1,1,
#         3,1,4,4,3,2,2,1,1,3,2,3,1,1,2,2,2,2,3,4,1,2,5,3,
#         1,6,3,1,2,5,1,2,2,2,4,1,2,3,1,2,1,1,3,1,4,1,2,1,
#         1,3,4,1,1,1,1,1,1,1,1,2,1,2,3,2,3,5,1,1,2,4,3,3,
#         1,3,4,1,1,4,3,4,1,1,1,1,2,2,2,1,2,1,2,1,1,1,6,2,
#         2,4,1,5])

#     rv = cs.RandomVariable(maxBins=16)
#     counts = np.ones_like(data)
#     rv.fit(data, counts)

#     # print(rv.lower)
#     # print(rv.upper)
#     # print(rv.count)
#     # print(rv.known)

#     rv._assertConnected()
#     # print(x.lower)
#     # print(x.upper)
#     # print(x.count)
#     # print(x.known)
#     # assert x._assertConnected()    

